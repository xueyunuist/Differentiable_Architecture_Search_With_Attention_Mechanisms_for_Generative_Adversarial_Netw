import argparse

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--data', type=str, default='./data', help='location of the data corpus')
    parser.add_argument('--dataset', type=str, default='cifar10', help='the name of dataset')
    parser.add_argument('--gen', type=str, default='Network_gen', help='the name of generator instance')
    parser.add_argument('--dis', type=str, default='Network_dis_Auto', help='the name of discriminator instance')
    parser.add_argument('--num_classes', type=int, default=10, help='the number of classes of the dataset')
    parser.add_argument('--batch_size', type=int, default=64, help='batch size')
    parser.add_argument('-gen_bs', '--gen_batch_size', type=int, default=64, help='size of the batches')
    parser.add_argument('-dis_bs', '--dis_batch_size', type=int, default=64, help='size of the batches')
    parser.add_argument('--eval_batch_size', type=int, default=100)
    parser.add_argument('--num_eval_imgs', type=int, default=50000)
    parser.add_argument('--img_size', type=int, default=32, help='img size of input image')
    parser.add_argument('--channels', type=int, default=3, help='number of image channels')
    parser.add_argument('--learning_rate', type=float, default=0.025, help='init learning rate')
    parser.add_argument('--learning_rate_min', type=float, default=0.001, help='min learning rate')
    parser.add_argument('--g_lr', type=float, default=0.0002, help='adam: gen learning rate')
    parser.add_argument('--d_lr', type=float, default=0.00004, help='adam: disc learning rate')
    parser.add_argument('--momentum', type=float, default=0.9, help='momentum')
    parser.add_argument('--weight_decay', type=float, default=3e-4, help='weight decay')
    parser.add_argument('--lamina', type=float, default=1.0, help='balance train loss and val loss to update alphas')
    parser.add_argument('--report_freq', type=float, default=50, help='report frequency')
    parser.add_argument('--gpu', type=int, default=0, help='gpu device id')
    parser.add_argument('--epochs', type=int, default=100, help='num of training epochs')
    parser.add_argument('--eval_every', type=int, default=4, help='num of training epochs')
    parser.add_argument('--init_channels', type=int, default=16, help='num of init channels')
    parser.add_argument('--layers', type=int, default=8, help='total number of layers')
    parser.add_argument('--model_path', type=str, default='saved_models', help='path to save the model')
    parser.add_argument('--cutout', action='store_true', default=False, help='use cutout')
    parser.add_argument('--cutout_length', type=int, default=16, help='cutout length')
    parser.add_argument('--drop_path_prob', type=float, default=0.3, help='drop path probability')
    parser.add_argument('--save', type=str, default='EXP', help='experiment name')
    parser.add_argument('--seed', type=int, default=2, help='random seed')
    parser.add_argument('--grad_clip', type=float, default=5, help='gradient clipping')
    parser.add_argument('--train_portion', type=float, default=0.5, help='portion of training data')
    parser.add_argument('--unrolled', action='store_true', default=False, help='use one-step unrolled validation loss')
    parser.add_argument('--arch_learning_rate', type=float, default=3e-4, help='learning rate for arch encoding')
    parser.add_argument('--arch_weight_decay', type=float, default=1e-3, help='weight decay for arch encoding')
    parser.add_argument('--beta1', type=float, default=0.0, help='adam: decay of first order momentum of gradient')
    parser.add_argument('--beta2', type=float, default=0.9, help='adam: decay of first order momentum of gradient')
    parser.add_argument('--gf_dim', type=int, default=64, help='The base channel num of gen')
    parser.add_argument('--df_dim', type=int, default=64, help='The base channel num of disc')
    parser.add_argument('--latent_dim', type=int, default=128, help='dimensionality of the latent space')
    parser.add_argument('--n_critic', type=int, default=5, help='number of training steps for discriminator per iter')
    parser.add_argument('--fix_alphas_epochs', type=int, default=50, help='number of training epochs to fix updating alphas')
    parser.add_argument('--outter_steps', type=int, default=20, help='number of iterations to update alphas')
    parser.add_argument('--inner_steps', type=int, default=20, help='number of iterations to update omega')
    parser.add_argument('--worst_steps', type=int, default=40, help='number of iterations to estimate gen_worst and dis_worst')
    parser.add_argument('--bottom_width', type=int, default=4, help="the base resolution of the GAN")
    parser.add_argument('--d_spectral_norm', action='store_false', help='add spectral_norm on discriminator?')
    parser.add_argument('--parallel', action='store_true', help='use data parallel')
    parser.add_argument('--dis_with_bn', action='store_true', help='D has BN layers?')
    parser.add_argument('--gen_with_bn', action='store_true', help='G has BN layers?')
    parser.add_argument('--eval', action='store_false', help='eval the super network?')
    parser.add_argument('--restrict_dis_grow', action='store_true', help='restrict dis to have 3 blocks?')
    parser.add_argument('--with_dis_worst', action='store_false', help='train D_worst?')
    parser.add_argument('--use_train_val', action='store_true', help='use trainval data to update alphas?')
    parser.add_argument('--grow', action='store_true', help='stack G and D during search?')
    parser.add_argument('--grow_epoch', type=int, default=[20, 60, 80], nargs='+', help='epoch to stack G and D')
    parser.add_argument('--use_gumbel', action='store_true', help='use gumbel softmax?')
    parser.add_argument('--update_alphas', action='store_false', help='alphas require grad?')
    parser.add_argument('--only_update_w', action='store_true', help='only update w to obtain g_worst and d_worst?')
    parser.add_argument('--only_update_w_g', action='store_true', help='only update w of G to obtain g_worst?')
    parser.add_argument('--only_update_alpha_g', action='store_true', help='only update alphas of G to obtain g_worst?')
    parser.add_argument('--only_update_alpha', action='store_true', help='only update alphas to obtain g_worst and d_worst?')
    parser.add_argument('--load_path', type=str, default='', help='the path to load trained model')
    parser.add_argument('--gen_normal_opr', type=str, default='PRIMITIVES_NORMAL_GEN', help='normal operations of gen ')
    parser.add_argument('--gen_up_opr', type=str, default='PRIMITIVES_UP', help='up operations of gen ')
    parser.add_argument('--dis_normal_opr', type=str, default='PRIMITIVES_NORMAL_DIS', help='normal operations of dis')
    parser.add_argument('--start_epoch', type=int, default=0, help='epoch to start training')
    parser.add_argument('--t', type=float, default=0.5, help='teperature of gumbel softmax')
    parser.add_argument('--exp_name', type=str, default='', help='the name of experiment')
 
    args = parser.parse_args()
    return args
